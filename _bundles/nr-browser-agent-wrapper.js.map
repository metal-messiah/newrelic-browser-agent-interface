{"version":3,"file":"nr-browser-agent-wrapper.js","mappings":"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","sources":["webpack://NRBrowserAgentWrapper/webpack/universalModuleDefinition","webpack://NRBrowserAgentWrapper/./src/checks/index.ts","webpack://NRBrowserAgentWrapper/./src/config/config.ts","webpack://NRBrowserAgentWrapper/./src/core/core.ts","webpack://NRBrowserAgentWrapper/./src/index.ts","webpack://NRBrowserAgentWrapper/./src/methods/index.ts","webpack://NRBrowserAgentWrapper/./src/types/types.ts","webpack://NRBrowserAgentWrapper/webpack/bootstrap","webpack://NRBrowserAgentWrapper/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"NRBrowserAgentWrapper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NRBrowserAgentWrapper\"] = factory();\n\telse\n\t\troot[\"NRBrowserAgentWrapper\"] = factory();\n})(self, function() {\nreturn ","// import { config } from '../config/config'\nimport { fail } from '../core/core'\nimport { Nreum, Callables } from '../types/types'\n\ndeclare global {\n    interface Window { NREUM: Nreum; newrelic: any}\n}\n\nexport function checkAgent(): boolean {\n    if (!!(window && (window.NREUM || window.newrelic))) return true\n    return fail()\n}\n\nfunction getAgent(): Nreum | false {\n    if (checkAgent()) return window.NREUM\n    return fail()\n}\n\nexport function checkMethod(methodName: Callables): boolean {\n    const agent = !!checkAgent() && getAgent()\n    if (!!agent) return agent.hasOwnProperty(methodName) && typeof window.NREUM[methodName] === \"function\"\n    return fail()\n}\n","export class AgentConfigurations {\n    applicationID?: string = window?.NREUM?.info?.applicationID\n}\n\nexport const config = new AgentConfigurations();\n\nexport function init(options: AgentConfigurations){\n    config.applicationID = options?.applicationID || config.applicationID\n}","import  { checkMethod } from '../checks/index'\nimport * as NewRelic from \"../types/types\";\nimport {config } from '../config/config';\n\nexport function fail(): false {\n    // implement things like supportability metrics or something here?  This could be called whenever a check fails\n    return false\n}\n\nexport function executeMethod(methodName: NewRelic.Callables, ...args: any[]): any {\n    if (checkMethod(methodName)) return execute(window.NREUM[methodName], ...args, config)\n    return fail()\n}\n\nfunction execute<T>(func: T, ...args: any[]){\n    if (typeof func === 'function') return func(...args)\n    return fail()\n}","import * as methods from './methods/index'\nexport const api: any = {global: methods.global, scoped: methods.scoped}\nexport { checkAgent } from './checks/index'\nexport { init } from './config/config'\n","import { executeMethod } from '../core/core'\nimport * as NewRelic from \"../types/types\";\n\n\nexport const global = {\n    finished,\n    inlineHit,\n    setCurrentRouteName,\n    setErrorHandler,\n    setPageViewName\n}\n\nexport const scoped = {\n    noticeError,\n    addRelease,\n    addPageAction,\n    addToTrace,\n    setCustomAttribute,\n    interaction\n}\n/**\n* Identifies a browser error without disrupting your app's operations.\n*\n* @param error Provide a meaningful error message that you can use when analyzing data on\n*   New Relic Browser's JavaScript errors page.\n* @param customAttributes An object containing name/value pairs representing custom attributes.\n* @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/notice-error\n*/\nfunction noticeError(error: Error | string, customAttributes?: Record<string, String | Number>): void {\n    return executeMethod(NewRelic.Callables.NOTICE_ERROR, error, customAttributes)\n}\n\n/**\n* Executes an inline hit.\n*\n* @param requestName the 'web page' name or service name\n* @param queueTime the amount of time spent in the app tier queue\n* @param appTime the amount of time spent in the application code\n* @param totalBeTime the total roundtrip time of the remote service call\n* @param domTime the time spent processing the result of the service call (or user defined)\n* @param feTime the time spent rendering the result of the service call (or user defined)\n* @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/notice-error\n*/\nfunction inlineHit(t: Date, requestName: string, queueTime: number, appTime: number, totalBeTime: number, domTime: number, feTime: number): void {\n    return executeMethod(NewRelic.Callables.INLINE_HIT, t, requestName, queueTime, appTime, totalBeTime, domTime, feTime)\n}\n\n/**\n     * Adds a unique name and ID to identify releases with multiple JavaScript bundles on the same page.\n     *\n     * @param releaseName A short description of the component; for example, the name of a project,\n     *  application, file, or library.\n     * @param releaseId The ID or version of this release; for example, a version number, build number\n     *   from your CI environment, GitHub SHA, GUID, or a hash of the contents. Since New Relic converts this\n     *   value into a string, you can also use null or undefined if necessary\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/add-release\n     */\nfunction addRelease(releaseName: string, releaseId: string): void {\n    return executeMethod(NewRelic.Callables.ADD_RELEASE, releaseName, releaseId)\n};\n\n /**\n  * Reports a Browser PageAction event to Insights along with a name and attributes.\n  *\n  * @param name Name or category of the action. Reports to Insights as the actionName attribute.\n  * @param attributes JSON object with one or more key/value pairs.\n  *   The key will report to Insights as its own PageAction attribute with the specified values.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/add-page-action\n  */\nfunction addPageAction(name: string, attributes?: Record<string, NewRelic.SimpleType>): void {\n    return executeMethod(NewRelic.Callables.ADD_PAGE_ACTION, name, attributes)\n};\n\n /**\n  * Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace.\n  *\n  * @param eventObject If you are sending the same event object to New Relic Insights as a\n  *   PageAction, omit the TYPE attribute. If included, it will override the event type and cause the\n  *   PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/add-to-trace\n  */\n function addToTrace(eventObject: NewRelic.EventObject): void {\n     return executeMethod(NewRelic.Callables.ADD_TO_TRACE, eventObject)\n };\n\n /**\n  * Records an additional time point as \"finished\" in a session trace, and sends the event to Insights.\n  *\n  * @param timestamp Defaults to the current time of the call. If used, this marks the time that\n  *   the page is \"finished\" according to your own criteria.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/finished\n  */\n function finished(timestamp?: number): void {\n     return executeMethod(NewRelic.Callables.FINISHED, timestamp)\n };\n\n /**\n  * Adds a user-defined attribute name and value to subsequent events on the page.\n  *\n  * @param name Name of the attribute. Appears as column in the PageView event.\n  *   It will also appear as a column in the PageAction event if you are using it.\n  * @param value Value of the attribute. Appears as the value in the named attribute column in the\n  *   PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute\n  *   values cannot be complex objects, only simple types such as strings and numbers.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/set-custom-attribute\n  */\n function setCustomAttribute(name: string, value: NewRelic.SimpleType): void {\n     return executeMethod(NewRelic.Callables.SET_CUSTOM_ATTRIBUTE, name, value)\n };\n\n /**\n  * Allows selective ignoring of known errors that the Browser agent captures.\n  *\n  * @param filterCallback The callback will be called with each error, so it is not\n  *   specific to one error. `err` will usually be an error object, but it can be other data types.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/set-error-handler\n  */\n function setErrorHandler(filterCallback: NewRelic.ErrorHandler): void {\n     return executeMethod(NewRelic.Callables.SET_ERROR_HANDLER, filterCallback)\n };\n\n /**\n  * Groups page views to help URL structure or to capture the URL's routing information.\n  *\n  * @param name Name of the page you want to use when viewing it in New Relic Browser or Insights.\n  * @param host Default is http://custom.transaction. Typically set host to your site's domain URI.\n  *   To further group these custom transactions, provide a custom host. Otherwise, the page views will be\n  *   assigned the default domain custom.transaction. Segments within the name must be explicitly added to\n  *   the Whitelist segments in your URL whitelist settings if they do not already appear.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/set-pageview-name\n  */\n function setPageViewName(name: string, host?: string): void {\n     return executeMethod(NewRelic.Callables.SET_PAGE_VIEW_NAME, name, host)\n };\n\n /**\n  * Returns a new API object that is bound to the current SPA interaction.\n  *\n  * @returns This method returns an API object that is bound to a specific BrowserInteraction\n  *   event. Each time this method is called for the same BrowserInteraction, a new object is created, but it still\n  *   references the same interaction.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/interaction-browser-spa-api\n  */\n function interaction(): BrowserInteraction {\n    return executeMethod(NewRelic.Callables.INTERACTION)\n };\n\n /**\n  * Gives SPA routes more accurate names than default names. Monitors specific routes rather than by default\n  * grouping.\n  *\n  * @param name Current route name for the page. Route names passed to setCurrentRouteName() can\n  *   be any string, but they should represent a routing pattern rather than a specific resource. For example,\n  *   use /users/:id rather than /users/123. If null, exits out of the route change requirement and returns to\n  *   the default naming strategy.\n  * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-set-current-route-name\n  */\n function setCurrentRouteName(name: string | null): void {\n     return executeMethod(NewRelic.Callables.SET_CURRENT_ROUTE_NAME)\n };\n\n interface BrowserInteraction {\n     /**\n      * Sets the text value of the HTML element that was clicked to start a browser interaction.\n      *\n      * @param value The text value of the HTML element that represents the action that started the interaction.\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/actiontext-browser-spa-api\n      */\n     actionText(value: string): this;\n\n     /**\n      * Times sub-components of a SPA interaction separately, including wait time and JS execution time.\n      *\n      * @param name This will be used as the name of the tracer. If you do not include a name,\n      *   New Relic Browser does not add a node to the interaction tree. The callback time will be\n      *   attributed to the parent node.\n      * @param callback A callback that contains the synchronous work to run at the end of the async work.\n      *   To execute this callback, call the wrapper function returned using createTracer()\n      * @returns This method ends the async time. It calls (and times) the callback that was passed into createTracer().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-create-tracer\n      */\n     createTracer(name: string, callback?: NewRelic.Callback): NewRelic.Wrapper;\n\n     /**\n      * Ends the New Relic SPA interaction at the current time.\n      *\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-end\n      */\n     end(): this;\n\n     /**\n      * Stores values across the current SPA interaction asynchronously in New Relic Browser.\n      *\n      * @param callback A function that accepts the interaction context object\n      *   as its only argument.\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-get-context\n      */\n     // tslint:disable-next-line:no-unnecessary-generics\n     getContext<T extends NewRelic.ContextObject = NewRelic.ContextObject>(callback: NewRelic.GetContextCallback<T>): this;\n\n     /**\n      * Overrides other SPA save() calls; ignores an interaction so it is not saved or sent to New Relic.\n      *\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-ignore-browser\n      */\n     ignore(): this;\n\n     /**\n      * Adds custom attributes for SPA interactions to the end of an event. It is called when the interaction\n      * has finished. You can invoke methods to modify the interaction, but methods that have asynchronous\n      * side effects will not have an effect.\n      *\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-on-end\n      */\n     // tslint:disable-next-line:no-unnecessary-generics\n     onEnd<T extends NewRelic.ContextObject = NewRelic.ContextObject>(callback: NewRelic.GetContextCallback<T>): this;\n\n     /**\n      * Ensures a SPA browser interaction will be saved when it ends.\n      *\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-save\n      */\n     save(): this;\n\n     /**\n      * Adds a custom SPA attribute only to the current interaction in New Relic Browser.\n      *\n      * @param key Used as the attribute name on the BrowserInteraction event.\n      * @param value Used as the attribute value on the BrowserInteraction event. This can be a\n      *   string, number, boolean, or object. If it is an object, New Relic serializes it to a JSON string.\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-set-attribute\n      */\n     setAttribute(key: string, value: NewRelic.ComplexType): this;\n\n     /**\n      * Sets the name and trigger of a SPA's browser interaction that is not a route change or URL change.\n      *\n      * @param name If null, the name will be set using the targetGroupedUrl attribute.\n      *   If not null, this will set the browserInteractionName attribute in the BrowserInteraction event.\n      * @param trigger If not null, this will set the TRIGGER attribute on the BrowserInteraction event.\n      * @returns This method returns the same API object created by interaction().\n      * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-set-name\n      */\n     setName(name: string, trigger?: string): this;\n }","export interface Nreum extends Callable {\n    info?: Info,\n    init?: Init,\n    loader_config?: LoaderConfig,\n    o?: O,\n}\n\nexport enum Callables {\n    ADD_PAGE_ACTION = 'addPageAction',\n    ADD_RELEASE = 'addRelease',\n    ADD_TO_TRACE = 'addToTrace',\n    FINISHED = 'finished',\n    INLINE_HIT = 'inlineHit',\n    INTERACTION = 'interaction',\n    NOTICE_ERROR = 'noticeError',\n    SET_CURRENT_ROUTE_NAME = 'setCurrentRouteName',\n    SET_CUSTOM_ATTRIBUTE = 'setCustomAttribute',\n    SET_ERROR_HANDLER = 'setErrorHandler',\n    SET_PAGE_VIEW_NAME = 'setPageViewName',\n    SET_TOKEN = 'setToken'\n}\n\nexport interface Callable {\n    addPageAction?: () => any,\n    addRelease?: () => any,\n    addToTrace?: () => any,\n    finished?: () => any,\n    inlineHit?: () => any,\n    interaction?: () => any,\n    noticeError?: () => any,\n    setCurrentRouteName?: () => any,\n    setCustomAttribute?: () => any,\n    setErrorHandler?: () => any,\n    setPageViewName?: () => any,\n    setToken?: () => any\n}\n\nexport interface Info {\n    agent?: string,\n    applicationID?: string,\n    beacon?: string,\n    errorBeacon?: string,\n    licenseKey?: string,\n    queueTime?: number,\n    applicationTime?: number,\n    ttGuid?: string,\n    user?: string,\n    agentToken?: string | null\n    jsAttributes?: Record<string, ComplexType>,\n    transactionName?: string\n    account?: string,\n    product?: string,\n    extra?: string,\n    userAttributes?: string,\n    atts?: string,\n    tNamePlain?: string,\n    sa?: string,\n    assetServerPort?: number,\n    assetServerSSLPort?: number | null,\n    corsServerPort?: number,\n}\n\nexport interface Init {\n    ssl?: boolean,\n    privacy?: Privacy,\n    page_view_timing?: PageViewTiming,\n    harvest?: Harvest,\n    spa?: Spa,\n    distributed_tracing?: DistributedTracing, \n    ins?: Ins, \n    jserrors?: Jserrors, \n    ajax?: Ajax,\n}\n\nexport interface LoaderConfig {\n    accountID?: number,\n    agentID?: number,\n    trustKey?: number,\n    xpid?: string,\n}\n\nexport interface Privacy {\n    cookies_enabled?: boolean\n}\n\nexport interface PageViewTiming {\n    initialHarvestSeconds?: number,\n    maxLCPTimeSeconds?: number,\n    harvestTimeSeconds?: number,\n    enabled?: boolean\n}\n\nexport interface O {\n    CT?: () => any,\n    EV?: () => any,\n    MO?: () => any,\n    PR?: () => any,\n    REQ?: () => any,\n    SI?: () => any,\n    ST?: () => any,\n    XHR?: () => any\n}\n\nexport interface Harvest {\n    tooManyRequestsDelay?: number,\n}\n\nexport interface Spa {\n    enabled?: boolean\n}\n\nexport interface DistributedTracing {\n    cors_use_traceconttext_headers?: boolean,\n    enabled?: boolean,\n    allowed_origins?: string[],\n    exclude_newrelic_header?: boolean,\n    cors_use_newrelic_header?: boolean,\n}\n\nexport interface Ins {\n    harvestTimeSeconds?: number\n}\n\nexport interface Jserrors {\n    harvestTimeSeconds?: number\n}\n\nexport interface Ajax { \n    deny_list?: string[],\n    enabled?: boolean,\n    harvestTimeSeconds?: number,\n    maxPayloadSize?: number,\n}\n\n\nexport interface EventObject {\n     /** Event name */\n     name: string;\n     /** Start time in ms since epoch */\n     start: number;\n     /** End time in ms since epoch.  Defaults to same as start resulting in trace object with a duration of zero. */\n     end?: number | undefined;\n     /** Origin of event */\n     origin?: string | undefined;\n     /** Event type */\n     type?: string | undefined;\n }\n\nexport interface ContextObject extends Record<string, any> {}\n\nexport interface Callback {\n     (): void;\n }\n\nexport interface ErrorHandler {\n     (err: any): boolean;\n }\n\nexport interface GetContextCallback<T extends ContextObject = ContextObject> {\n     (contextObject: T): void;\n }\n\nexport interface Wrapper {\n     (): void;\n }\n\nexport type SimpleType = string | number;\nexport type ComplexType = string | number | boolean | unknown;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(22);\n"],"names":["root","factory","exports","module","define","amd","self","checkAgent","window","NREUM","newrelic","fail","methodName","agent","hasOwnProperty","applicationID","info","AgentConfigurations","config","options","execute","func","args","checkMethod","api","global","methods","scoped","init","finished","timestamp","executeMethod","NewRelic","Callables","FINISHED","inlineHit","t","requestName","queueTime","appTime","totalBeTime","domTime","feTime","INLINE_HIT","setCurrentRouteName","name","SET_CURRENT_ROUTE_NAME","setErrorHandler","filterCallback","SET_ERROR_HANDLER","setPageViewName","host","SET_PAGE_VIEW_NAME","noticeError","error","customAttributes","NOTICE_ERROR","addRelease","releaseName","releaseId","ADD_RELEASE","addPageAction","attributes","ADD_PAGE_ACTION","addToTrace","eventObject","ADD_TO_TRACE","setCustomAttribute","value","SET_CUSTOM_ATTRIBUTE","interaction","INTERACTION","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}