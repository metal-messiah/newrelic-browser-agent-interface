{"version":3,"file":"nr-browser-agent-wrappermin.js","mappings":"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","sources":["webpack://NRBrowserAgentWrapper/webpack/universalModuleDefinition","webpack://NRBrowserAgentWrapper/./src/checks/index.ts","webpack://NRBrowserAgentWrapper/./src/core/core.ts","webpack://NRBrowserAgentWrapper/./src/index.ts","webpack://NRBrowserAgentWrapper/./src/interface/interface.ts","webpack://NRBrowserAgentWrapper/./src/methods/index.ts","webpack://NRBrowserAgentWrapper/./src/types/types.ts","webpack://NRBrowserAgentWrapper/webpack/bootstrap","webpack://NRBrowserAgentWrapper/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"NRBrowserAgentWrapper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NRBrowserAgentWrapper\"] = factory();\n\telse\n\t\troot[\"NRBrowserAgentWrapper\"] = factory();\n})(self, function() {\nreturn ","import { Nreum, GlobalApis, ScopedApis } from '../types/types'\n\ndeclare global {\n    interface Window { NREUM: Nreum; newrelic: any}\n}\n\nexport function checkAgent(): boolean {\n    return !!(window && (window.NREUM || window.newrelic))\n}\n\nexport function getAgent(): Nreum | false {\n    return checkAgent() && window.NREUM\n}\n\nexport function checkMethod(methodName: keyof GlobalApis | keyof ScopedApis): boolean {\n    const agent = !!checkAgent() && getAgent()\n    if (!!agent) return agent.hasOwnProperty(methodName) && typeof window.NREUM[methodName] === \"function\"\n    return false\n}\n\nexport function checkConfig(): boolean {\n    const agent = getAgent()\n    if (!!agent) return agent.hasOwnProperty('info') && agent.hasOwnProperty('loader_config')\n    return false\n}\n","import  { checkMethod } from '../checks/index'\nimport * as NewRelic from \"../types/types\";\nimport { AgentConfigurations } from '../interface/interface';\n\nexport default class Core {\n    constructor(public config: AgentConfigurations){}\n\n    private fail: () => false = () => {\n        // implement things like supportability metrics or something here?  This could be called whenever a check fails\n        return false\n    }\n\n    private execute:<T>(func: T, ...args: any[]) => any | false = (func, ...args) => {\n        if (typeof func === 'function') return func(...args)\n        return this.fail()\n    }\n\n    executeScoped: (methodName: keyof NewRelic.GlobalApis | keyof NewRelic.ScopedApis, ...args: any[]) => any | false = (methodName, ...args) => {\n        console.log(\"executeScoped...\", methodName, this.config)\n        if (checkMethod(methodName)) return this.execute(window.NREUM[methodName], ...args, this.config )\n        return this.fail()\n    }\n\n    executeGlobal: (methodName: keyof NewRelic.GlobalApis | keyof NewRelic.ScopedApis, ...args: any[]) => any | false = (methodName, ...args) => {\n        if (checkMethod(methodName)) return this.execute(window.NREUM[methodName], ...args )\n        return this.fail()\n    }\n}","import Nrba from './interface/interface'\nexport {AgentConfigurations} from './interface/interface'\n\nexport default Nrba\n","import Methods from '../methods/index'\nimport { checkAgent, getAgent } from '../checks/index'\nimport Core from '../core/core';\nimport * as NewRelic from '../types/types'\n\nexport class AgentConfigurations {\n    constructor( public appId: string = window?.NREUM?.info?.applicationID || '-1' ){}\n}\n\nclass Nrba {\n    api: NewRelic.ScopedApis\n    \n    constructor(config: AgentConfigurations){\n        const methods = new Methods(new Core(config || new AgentConfigurations()))\n        this.api = methods.scoped\n    }\n}\n\nconst agentInterface: {\n    setGlobalConfiguration: (info: NewRelic.Info, loaderConfig: NewRelic.LoaderConfig) => void,\n    createScope: (config: AgentConfigurations) => Nrba,\n    checkAgent: () => boolean,\n    api: NewRelic.GlobalApis\n} = {\n    setGlobalConfiguration: (info, loaderConfig) => {\n        const agent = getAgent()\n        if (agent) agent.info = info\n        if (agent) agent.loader_config = loaderConfig\n    },\n    createScope: (config) => {\n        return new Nrba(config)\n    },\n    checkAgent,\n    api: new Methods(new Core(new AgentConfigurations())).global\n}\n\nexport default agentInterface\n","\nimport Core from \"../core/core\";\nimport * as NewRelic from \"../types/types\";\n\nexport default class Methods {\n    core: Core\n    constructor(core: Core) { this.core = core }\n\n    /**\n    * Executes an inline hit.\n    *\n    * @param requestName the 'web page' name or service name\n    * @param queueTime the amount of time spent in the app tier queue\n    * @param appTime the amount of time spent in the application code\n    * @param totalBeTime the total roundtrip time of the remote service call\n    * @param domTime the time spent processing the result of the service call (or user defined)\n    * @param feTime the time spent rendering the result of the service call (or user defined)\n    * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/notice-error\n    */\n    private inlineHitScoped: NewRelic.InlineHit = (t: Date, requestName: string, queueTime: number, appTime: number, totalBeTime: number, domTime: number, feTime: number): void => {\n        return this.core.executeGlobal(NewRelic.Callables.INLINE_HIT, t, requestName, queueTime, appTime, totalBeTime, domTime, feTime)\n    }\n    private inlineHitGlobal: NewRelic.InlineHit = (t: Date, requestName: string, queueTime: number, appTime: number, totalBeTime: number, domTime: number, feTime: number): void => {\n        return this.core.executeGlobal(NewRelic.Callables.INLINE_HIT, t, requestName, queueTime, appTime, totalBeTime, domTime, feTime)\n    }\n\n    /**\n         * Adds a unique name and ID to identify releases with multiple JavaScript bundles on the same page.\n         *\n         * @param releaseName A short description of the component; for example, the name of a project,\n         *  application, file, or library.\n         * @param releaseId The ID or version of this release; for example, a version number, build number\n         *   from your CI environment, GitHub SHA, GUID, or a hash of the contents. Since New Relic converts this\n         *   value into a string, you can also use null or undefined if necessary\n         * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/add-release\n         */\n    private addReleaseScoped: NewRelic.AddRelease = (releaseName: string, releaseId: string): void => {\n        return this.core.executeScoped(NewRelic.Callables.ADD_RELEASE, releaseName, releaseId)\n    };\n    private addReleaseGlobal: NewRelic.AddRelease = (releaseName: string, releaseId: string): void => {\n        return this.core.executeScoped(NewRelic.Callables.ADD_RELEASE, releaseName, releaseId)\n    };\n\n    /**\n     * Reports a Browser PageAction event to Insights along with a name and attributes.\n     *\n     * @param name Name or category of the action. Reports to Insights as the actionName attribute.\n     * @param attributes JSON object with one or more key/value pairs.\n     *   The key will report to Insights as its own PageAction attribute with the specified values.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/add-page-action\n     */\n    private addPageActionScoped: NewRelic.AddPageAction = (name: string, attributes?: Record<string, NewRelic.SimpleType>): void => {\n        return this.core.executeScoped(NewRelic.Callables.ADD_PAGE_ACTION, name, attributes)\n    };\n    private addPageActionGlobal: NewRelic.AddPageAction = (name: string, attributes?: Record<string, NewRelic.SimpleType>): void => {\n        return this.core.executeScoped(NewRelic.Callables.ADD_PAGE_ACTION, name, attributes)\n    };\n    \n\n    /**\n     * Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace.\n     *\n     * @param eventObject If you are sending the same event object to New Relic Insights as a\n     *   PageAction, omit the TYPE attribute. If included, it will override the event type and cause the\n     *   PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/add-to-trace\n     */\n    private addToTraceScoped: NewRelic.AddToTrace = (eventObject: NewRelic.EventObject): void => {\n        return this.core.executeGlobal(NewRelic.Callables.ADD_TO_TRACE, eventObject)\n    };\n    private addToTraceGlobal: NewRelic.AddToTrace = (eventObject: NewRelic.EventObject): void => {\n        return this.core.executeGlobal(NewRelic.Callables.ADD_TO_TRACE, eventObject)\n    };\n\n    /**\n     * Records an additional time point as \"finished\" in a session trace, and sends the event to Insights.\n     *\n     * @param timestamp Defaults to the current time of the call. If used, this marks the time that\n     *   the page is \"finished\" according to your own criteria.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/finished\n     */\n    private finishedScoped: NewRelic.Finished = (timestamp?: number): void => {\n        return this.core.executeGlobal(NewRelic.Callables.FINISHED, timestamp)\n    };\n    private finishedGlobal: NewRelic.Finished = (timestamp?: number): void => {\n        return this.core.executeGlobal(NewRelic.Callables.FINISHED, timestamp)\n    };\n\n    /**\n     * Adds a user-defined attribute name and value to subsequent events on the page.\n     *\n     * @param name Name of the attribute. Appears as column in the PageView event.\n     *   It will also appear as a column in the PageAction event if you are using it.\n     * @param value Value of the attribute. Appears as the value in the named attribute column in the\n     *   PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute\n     *   values cannot be complex objects, only simple types such as strings and numbers.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/set-custom-attribute\n     */\n    private setCustomAttributeScoped: NewRelic.SetCustomAttribute = (name: string, value: NewRelic.SimpleType): void => {\n        return this.core.executeScoped(NewRelic.Callables.SET_CUSTOM_ATTRIBUTE, name, value)\n    };\n    private setCustomAttributeGlobal: NewRelic.SetCustomAttribute = (name: string, value: NewRelic.SimpleType): void => {\n        return this.core.executeScoped(NewRelic.Callables.SET_CUSTOM_ATTRIBUTE, name, value)\n    };\n\n    /**\n     * Allows selective ignoring of known errors that the Browser agent captures.\n     *\n     * @param filterCallback The callback will be called with each error, so it is not\n     *   specific to one error. `err` will usually be an error object, but it can be other data types.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/set-error-handler\n     */\n    private setErrorHandlerScoped: NewRelic.SetErrorHandler = (filterCallback: NewRelic.ErrorHandler): void => {\n        return this.core.executeGlobal(NewRelic.Callables.SET_ERROR_HANDLER, filterCallback)\n    };\n    private setErrorHandlerGlobal: NewRelic.SetErrorHandler = (filterCallback: NewRelic.ErrorHandler): void => {\n        return this.core.executeGlobal(NewRelic.Callables.SET_ERROR_HANDLER, filterCallback)\n    };\n\n    /**\n     * Groups page views to help URL structure or to capture the URL's routing information.\n     *\n     * @param name Name of the page you want to use when viewing it in New Relic Browser or Insights.\n     * @param host Default is http://custom.transaction. Typically set host to your site's domain URI.\n     *   To further group these custom transactions, provide a custom host. Otherwise, the page views will be\n     *   assigned the default domain custom.transaction. Segments within the name must be explicitly added to\n     *   the Whitelist segments in your URL whitelist settings if they do not already appear.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/set-pageview-name\n     */\n    private setPageViewNameScoped: NewRelic.SetPageViewName = (name: string, host?: string): void => {\n        return this.core.executeGlobal(NewRelic.Callables.SET_PAGE_VIEW_NAME, name, host)\n    };\n    private setPageViewNameGlobal: NewRelic.SetPageViewName = (name: string, host?: string): void => {\n        return this.core.executeGlobal(NewRelic.Callables.SET_PAGE_VIEW_NAME, name, host)\n    };\n\n    /**\n     * Returns a new API object that is bound to the current SPA interaction.\n     *\n     * @returns This method returns an API object that is bound to a specific BrowserInteraction\n     *   event. Each time this method is called for the same BrowserInteraction, a new object is created, but it still\n     *   references the same interaction.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/interaction-browser-spa-api\n     */\n    private interactionScoped: NewRelic.Interaction = (): NewRelic.BrowserInteraction => {\n        return this.core.executeScoped(NewRelic.Callables.INTERACTION)\n    };\n    private interactionGlobal: NewRelic.Interaction = (): NewRelic.BrowserInteraction => {\n        return this.core.executeScoped(NewRelic.Callables.INTERACTION)\n    };\n\n\n    /**\n     * Gives SPA routes more accurate names than default names. Monitors specific routes rather than by default\n     * grouping.\n     *\n     * @param name Current route name for the page. Route names passed to setCurrentRouteName() can\n     *   be any string, but they should represent a routing pattern rather than a specific resource. For example,\n     *   use /users/:id rather than /users/123. If null, exits out of the route change requirement and returns to\n     *   the default naming strategy.\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-set-current-route-name\n     */\n    private setCurrentRouteNameScoped: NewRelic.SetCurrentRouteName = (name: string | null): void => {\n        return this.core.executeGlobal(NewRelic.Callables.SET_CURRENT_ROUTE_NAME, name)\n    };\n    private setCurrentRouteNameGlobal: NewRelic.SetCurrentRouteName = (name: string | null): void => {\n        return this.core.executeGlobal(NewRelic.Callables.SET_CURRENT_ROUTE_NAME, name)\n    };\n\n     /**\n    * Identifies a browser error without disrupting your app's operations.\n    *\n    * @param error Provide a meaningful error message that you can use when analyzing data on\n    *   New Relic Browser's JavaScript errors page.\n    * @param customAttributes An object containing name/value pairs representing custom attributes.\n    * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/notice-error\n    */\n    private noticeErrorScoped: NewRelic.NoticeError = (error: Error | string, customAttributes?: Record<string, String | Number>): void => {\n        return this.core.executeScoped(NewRelic.Callables.NOTICE_ERROR, error, customAttributes)\n    }\n    private noticeErrorGlobal: NewRelic.NoticeError = (error: Error | string, customAttributes?: Record<string, String | Number>): void => {\n        return this.core.executeGlobal(NewRelic.Callables.NOTICE_ERROR, error, customAttributes)\n    }\n\n    public global: NewRelic.GlobalApis = {\n        addToTrace: this.addToTraceGlobal,\n        finished: this.finishedGlobal,\n        inlineHit: this.inlineHitGlobal,\n        setCurrentRouteName: this.setCurrentRouteNameGlobal,\n        setErrorHandler: this.setErrorHandlerGlobal,\n        setPageViewName: this.setPageViewNameGlobal,\n        noticeError: this.noticeErrorGlobal,\n        addRelease: this.addReleaseGlobal,\n        addPageAction: this.addPageActionGlobal,\n        setCustomAttribute: this.setCustomAttributeGlobal,\n        interaction: this.interactionGlobal\n    }\n\n    public scoped: NewRelic.ScopedApis = {\n        noticeError: this.noticeErrorScoped,\n        addRelease: this.addReleaseScoped,\n        addPageAction: this.addPageActionScoped,\n        setCustomAttribute: this.setCustomAttributeScoped,\n        interaction: this.interactionScoped\n    }\n}\n","\nexport interface Nreum extends GlobalApis, ScopedApis {\n    info?: Info,\n    init?: Init,\n    loader_config?: LoaderConfig,\n    o?: O,\n}\n\nexport enum Callables {\n    ADD_PAGE_ACTION = 'addPageAction',\n    ADD_RELEASE = 'addRelease',\n    ADD_TO_TRACE = 'addToTrace',\n    FINISHED = 'finished',\n    INLINE_HIT = 'inlineHit',\n    INTERACTION = 'interaction',\n    NOTICE_ERROR = 'noticeError',\n    SET_CURRENT_ROUTE_NAME = 'setCurrentRouteName',\n    SET_CUSTOM_ATTRIBUTE = 'setCustomAttribute',\n    SET_ERROR_HANDLER = 'setErrorHandler',\n    SET_PAGE_VIEW_NAME = 'setPageViewName',\n    SET_TOKEN = 'setToken'\n}\n\nexport interface GlobalApis extends ScopedApis {\n    addToTrace?: AddToTrace,\n    finished?: Finished,\n    inlineHit?: InlineHit,\n    setCurrentRouteName?: SetCurrentRouteName,\n    setErrorHandler?: SetErrorHandler,\n    setPageViewName?: SetPageViewName,\n}\n\nexport interface ScopedApis {\n    addPageAction?: AddPageAction,\n    addRelease?: AddRelease,\n    interaction?: Interaction,\n    noticeError?: NoticeError,\n    setCustomAttribute?: SetCustomAttribute,\n}\n\nexport interface Info {\n    agent?: string,\n    applicationID?: string,\n    beacon?: string,\n    errorBeacon?: string,\n    licenseKey?: string,\n    queueTime?: number,\n    applicationTime?: number,\n    ttGuid?: string,\n    user?: string,\n    agentToken?: string | null\n    jsAttributes?: Record<string, ComplexType>,\n    transactionName?: string\n    account?: string,\n    product?: string,\n    extra?: string,\n    userAttributes?: string,\n    atts?: string,\n    tNamePlain?: string,\n    sa?: string,\n    assetServerPort?: number,\n    assetServerSSLPort?: number | null,\n    corsServerPort?: number,\n}\n\nexport interface Init {\n    ssl?: boolean,\n    privacy?: Privacy,\n    page_view_timing?: PageViewTiming,\n    harvest?: Harvest,\n    spa?: Spa,\n    distributed_tracing?: DistributedTracing, \n    ins?: Ins, \n    jserrors?: Jserrors, \n    ajax?: Ajax,\n}\n\nexport interface LoaderConfig {\n    accountID?: number,\n    agentID?: number,\n    trustKey?: number,\n    xpid?: string,\n}\n\nexport interface Privacy {\n    cookies_enabled?: boolean\n}\n\nexport interface PageViewTiming {\n    initialHarvestSeconds?: number,\n    maxLCPTimeSeconds?: number,\n    harvestTimeSeconds?: number,\n    enabled?: boolean\n}\n\nexport interface O {\n    CT?: () => any,\n    EV?: () => any,\n    MO?: () => any,\n    PR?: () => any,\n    REQ?: () => any,\n    SI?: () => any,\n    ST?: () => any,\n    XHR?: () => any\n}\n\nexport interface Harvest {\n    tooManyRequestsDelay?: number,\n}\n\nexport interface Spa {\n    enabled?: boolean\n}\n\nexport interface DistributedTracing {\n    cors_use_traceconttext_headers?: boolean,\n    enabled?: boolean,\n    allowed_origins?: string[],\n    exclude_newrelic_header?: boolean,\n    cors_use_newrelic_header?: boolean,\n}\n\nexport interface Ins {\n    harvestTimeSeconds?: number\n}\n\nexport interface Jserrors {\n    harvestTimeSeconds?: number\n}\n\nexport interface Ajax { \n    deny_list?: string[],\n    enabled?: boolean,\n    harvestTimeSeconds?: number,\n    maxPayloadSize?: number,\n}\n\n\nexport interface EventObject {\n    /** Event name */\n    name: string;\n    /** Start time in ms since epoch */\n    start: number;\n    /** End time in ms since epoch.  Defaults to same as start resulting in trace object with a duration of zero. */\n    end?: number | undefined;\n    /** Origin of event */\n    origin?: string | undefined;\n    /** Event type */\n    type?: string | undefined;\n}\n\nexport interface ContextObject extends Record<string, any> {}\n\nexport interface Callback {\n    (): void;\n}\n\nexport interface ErrorHandler {\n    (err: any): boolean;\n}\n\nexport interface GetContextCallback<T extends ContextObject = ContextObject> {\n    (contextObject: T): void;\n}\n\nexport interface Wrapper {\n    (): void;\n}\n\nexport type SimpleType = string | number;\nexport type ComplexType = string | number | boolean | unknown;\n\nexport interface BrowserInteraction {\n    /**\n     * Sets the text value of the HTML element that was clicked to start a browser interaction.\n     *\n     * @param value The text value of the HTML element that represents the action that started the interaction.\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/actiontext-browser-spa-api\n     */\n    actionText(value: string): this;\n\n    /**\n     * Times sub-components of a SPA interaction separately, including wait time and JS execution time.\n     *\n     * @param name This will be used as the name of the tracer. If you do not include a name,\n     *   New Relic Browser does not add a node to the interaction tree. The callback time will be\n     *   attributed to the parent node.\n     * @param callback A callback that contains the synchronous work to run at the end of the async work.\n     *   To execute this callback, call the wrapper returned using createTracer()\n     * @returns This method ends the async time. It calls (and times) the callback that was passed into createTracer().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-create-tracer\n     */\n    createTracer(name: string, callback?: Callback): Wrapper;\n\n    /**\n     * Ends the New Relic SPA interaction at the current time.\n     *\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-end\n     */\n    end(): this;\n\n    /**\n     * Stores values across the current SPA interaction asynchronously in New Relic Browser.\n     *\n     * @param callback A that accepts the interaction context object\n     *   as its only argument.\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-get-context\n     */\n    // tslint:disable-next-line:no-unnecessary-generics\n    getContext<T extends ContextObject = ContextObject>(callback: GetContextCallback<T>): this;\n\n    /**\n     * Overrides other SPA save() calls; ignores an interaction so it is not saved or sent to New Relic.\n     *\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-ignore-browser\n     */\n    ignore(): this;\n\n    /**\n     * Adds custom attributes for SPA interactions to the end of an event. It is called when the interaction\n     * has finished. You can invoke methods to modify the interaction, but methods that have asynchronous\n     * side effects will not have an effect.\n     *\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-on-end\n     */\n    // tslint:disable-next-line:no-unnecessary-generics\n    onEnd<T extends ContextObject = ContextObject>(callback: GetContextCallback<T>): this;\n\n    /**\n     * Ensures a SPA browser interaction will be saved when it ends.\n     *\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-save\n     */\n    save(): this;\n\n    /**\n     * Adds a custom SPA attribute only to the current interaction in New Relic Browser.\n     *\n     * @param key Used as the attribute name on the BrowserInteraction event.\n     * @param value Used as the attribute value on the BrowserInteraction event. This can be a\n     *   string, number, boolean, or object. If it is an object, New Relic serializes it to a JSON string.\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-set-attribute\n     */\n    setAttribute(key: string, value: ComplexType): this;\n\n    /**\n     * Sets the name and trigger of a SPA's browser interaction that is not a route change or URL change.\n     *\n     * @param name If null, the name will be set using the targetGroupedUrl attribute.\n     *   If not null, this will set the browserInteractionName attribute in the BrowserInteraction event.\n     * @param trigger If not null, this will set the TRIGGER attribute on the BrowserInteraction event.\n     * @returns This method returns the same API object created by interaction().\n     * @see https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-set-name\n     */\n    setName(name: string, trigger?: string): this;\n}\n\nexport interface Api {\n    global: GlobalApis,\n    scoped: ScopedApis\n}\n\nexport type AddRelease = (releaseName: string, releaseId: string) => void \n\nexport type AddPageAction = (name: string, attributes?: Record<string, SimpleType>) => void;\n\nexport type AddToTrace = (eventObject: EventObject) => void;\n\nexport type Finished = (timestamp?: number) => void;\n\nexport type NoticeError = (error: Error | string, customAttributes?: Record<string, SimpleType>) => void;\n\nexport type SetCustomAttribute = (name: string, value: SimpleType) => void;\n\nexport type SetErrorHandler = (filterCallback: ErrorHandler) => void;\n\nexport type SetPageViewName = (name: string, host?: string) => void;\n\nexport type Interaction = () => BrowserInteraction;\n\nexport type SetCurrentRouteName = (name: string | null) => void;\n\nexport type InlineHit = (t: Date, requestName: string, queueTime: number, appTime: number, totalBeTime: number, domTime: number, feTime: number) => void\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(22);\n"],"names":["root","factory","exports","module","define","amd","self","checkAgent","window","NREUM","newrelic","getAgent","methodName","agent","hasOwnProperty","config","fail","execute","func","args","executeScoped","console","log","checkMethod","executeGlobal","AgentConfigurations","appId","info","applicationID","methods","this","api","scoped","agentInterface","setGlobalConfiguration","loaderConfig","loader_config","createScope","Nrba","global","core","inlineHitScoped","t","requestName","queueTime","appTime","totalBeTime","domTime","feTime","NewRelic","Callables","INLINE_HIT","inlineHitGlobal","addReleaseScoped","releaseName","releaseId","ADD_RELEASE","addReleaseGlobal","addPageActionScoped","name","attributes","ADD_PAGE_ACTION","addPageActionGlobal","addToTraceScoped","eventObject","ADD_TO_TRACE","addToTraceGlobal","finishedScoped","timestamp","FINISHED","finishedGlobal","setCustomAttributeScoped","value","SET_CUSTOM_ATTRIBUTE","setCustomAttributeGlobal","setErrorHandlerScoped","filterCallback","SET_ERROR_HANDLER","setErrorHandlerGlobal","setPageViewNameScoped","host","SET_PAGE_VIEW_NAME","setPageViewNameGlobal","interactionScoped","INTERACTION","interactionGlobal","setCurrentRouteNameScoped","SET_CURRENT_ROUTE_NAME","setCurrentRouteNameGlobal","noticeErrorScoped","error","customAttributes","NOTICE_ERROR","noticeErrorGlobal","addToTrace","finished","inlineHit","setCurrentRouteName","setErrorHandler","setPageViewName","noticeError","addRelease","addPageAction","setCustomAttribute","interaction","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}